<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_LogView" Id="{2102c28f-b493-401d-bc1b-a6b7383fb28c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK INTERNAL FB_LogView
VAR CONSTANT
	NUMBER_OF_ITEMS_IN_TABLE : UINT := 16;
END_VAR
VAR_INPUT
	bAcknowledge : BOOL; // Clear inactive items from the log
	bReset : BOOL; // Reset faults
	bBlinkButton : BOOL; // Blink the button to alert operator (optional, not used thusfar)
	fbLogHandler_PersistentArray : REFERENCE TO FB_LogHandler_PersistentArray; // Optional reference to a FB_LogHandler_RetainableList instance
END_VAR
VAR_OUTPUT
	arLog : ARRAY[1..NUMBER_OF_ITEMS_IN_TABLE] OF UDT_HMI_FaultLogItem;

	bShowLogHistory : BOOL; // Show the log history instead of the fault list
	arHistory : ARRAY[1..GVL_Utilities.RETAINABLE_LOG_HISTORY_SIZE] OF UDT_HMI_LogItem;
	
	// Log button properties
	dLogButtonColor 	: DWORD;
	nLogButtonNumber 	: UINT;
		
	reNewLogMessages : BOOL; // TRUE when new log messages arrive (for one cycle)
	nPrevFaultsInLog : UINT;
END_VAR
VAR
	fbFormatString : FB_FormatString;
END_VAR
VAR_TEMP
	i : UINT; // Iterator
	nArHistoryIndex : UINT; // arHistory array index
	
	stLogItem : UDT_LogItem;
	stFaultLogItem : UDT_FaultLogItem;
	stEmptyFaultLogItem : UDT_HMI_FaultLogItem;
	
	fMonth : REAL;
	fDay : REAL;
	fHour : REAL;
	fMinute : REAL;
	fSecond : REAL;
	fMilliseconds : REAL;	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[{region 'FAULT LOG / ALARM BELL ICON'}
// Report new log messages
reNewLogMessages := (GVL_Utilities.fbFaultHandler.nFaultsInLog > nPrevFaultsInLog);
bShowLogHistory R= reNewLogMessages;
nPrevFaultsInLog := GVL_Utilities.fbFaultHandler.nFaultsInLog;

// Update array
stFaultLogItem := GVL_Utilities.fbFaultHandler.Head;
FOR i := 1 TO NUMBER_OF_ITEMS_IN_TABLE DO
	IF i <= GVL_Utilities.fbFaultHandler.nFaultsInLog THEN
		arLog[i].sID := stFaultLogItem.Id;
		arLog[i].sDescription := stFaultLogItem.stFault.Description;
		arLog[i].sStartTime := DT_To_Str(stFaultLogItem.StartTime);
		arLog[i].sEndTime := DT_To_Str(stFaultLogItem.EndTime);
		IF stFaultLogItem.stFault.Active THEN
			arLog[i].dColor_Bg := GetFaultTypeColorBG(stFaultLogItem.stFault.FaultType);
		ELSE
			arLog[i].dColor_Bg := E_Color.White;
		END_IF
		stFaultLogItem := GVL_Utilities.fbFaultHandler.Next;
	ELSE
		arLog[i] := stEmptyFaultLogItem;
	END_IF
END_FOR

// Set log button properties
nLogButtonNumber := GVL_Utilities.fbFaultHandler.nFaultsInLog;
// Set color, in order of priority
IF bBlinkButton AND Sys_Variables.BlinkFast THEN
	dLogButtonColor := E_Color.Bg_Dark;
ELSIF GVL_Utilities.fbFaultHandler.arActiveFaultTypes[E_FaultTypes.FF] THEN
	dLogButtonColor := GetFaultTypeColorBG(E_FaultTypes.FF);
ELSIF GVL_Utilities.fbFaultHandler.arActiveFaultTypes[E_FaultTypes.CF] THEN
	dLogButtonColor := GetFaultTypeColorBG(E_FaultTypes.CF);
ELSIF GVL_Utilities.fbFaultHandler.arActiveFaultTypes[E_FaultTypes.MC] THEN
	dLogButtonColor := GetFaultTypeColorBG(E_FaultTypes.MC);
ELSIF GVL_Utilities.fbFaultHandler.arActiveFaultTypes[E_FaultTypes.OW] THEN
	dLogButtonColor := GetFaultTypeColorBG(E_FaultTypes.OW);
ELSIF GVL_Utilities.fbFaultHandler.arActiveFaultTypes[E_FaultTypes.OM] THEN
	dLogButtonColor := GetFaultTypeColorBG(E_FaultTypes.OM);
ELSE
	dLogButtonColor := E_Color.Bg_Light;
END_IF 

IF bAcknowledge THEN
	bAcknowledge R= GVL_Utilities.fbFaultHandler.CmdClearInactive();
END_IF

IF bReset THEN
	bReset R= GVL_Utilities.fbFaultHandler.CmdReset();
END_IF
{endregion}

{region 'Log history'}
IF __ISVALIDREF(fbLogHandler_PersistentArray) THEN
	// Add items from retainable list in reversed order, starting with the last added item
	nArHistoryIndex := 0;
	FOR i := (fbLogHandler_PersistentArray.nIndex + GVL_Utilities.RETAINABLE_LOG_HISTORY_SIZE - 1) TO fbLogHandler_PersistentArray.nIndex BY -1 DO
		nArHistoryIndex := nArHistoryIndex + 1;
		stLogItem := fbLogHandler_PersistentArray.aLogItems[(i MOD GVL_Utilities.RETAINABLE_LOG_HISTORY_SIZE) + 1];
		arHistory[nArHistoryIndex].sMsg := TO_STRING(stLogItem.sMsg);
		arHistory[nArHistoryIndex].sLevel := TO_STRING(stLogItem.eLevel);
		arHistory[nArHistoryIndex].dColor_Bg := GetLevelColorBG(stLogItem.eLevel);

		// Build timestamp string
		fMonth := WORD_TO_REAL(stLogItem.stTimestamp.wMonth); 
		fDay := WORD_TO_REAL(stLogItem.stTimestamp.wDay); 
		fHour := WORD_TO_REAL(stLogItem.stTimestamp.wHour); 
		fMinute := WORD_TO_REAL(stLogItem.stTimestamp.wMinute); 
		fSecond := WORD_TO_REAL(stLogItem.stTimestamp.wSecond); 
		fMilliseconds := WORD_TO_REAL(stLogItem.stTimestamp.wMilliseconds);
		fbFormatString(
			sFormat := '%u-%02.0f-%02.0f %02.0f:%02.0f:%02.0f.%03.0f',
			arg1 := F_WORD(stLogItem.stTimestamp.wYear),
			arg2 := F_REAL(fMonth),
			arg3 := F_REAL(fDay),
			arg4 := F_REAL(fHour),
			arg5 := F_REAL(fMinute),
			arg6 := F_REAL(fSecond),
			arg7 := F_REAL(fMilliseconds),
			sOut => arHistory[nArHistoryIndex].sTimestamp
		);
	END_FOR
END_IF
{endregion}
]]></ST>
    </Implementation>
    <Method Name="GetFaultTypeColorBG" Id="{2d81764f-570f-4723-b755-981481238787}">
      <Declaration><![CDATA[METHOD PRIVATE GetFaultTypeColorBG : DWORD
VAR_INPUT
	eFaultType : E_FaultTypes;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eFaultType OF
	E_FaultTypes.FF:
		GetFaultTypeColorBG := E_Color.LightRed;
	E_FaultTypes.CF:
		GetFaultTypeColorBG := E_Color.LightRed;
	E_FaultTypes.MC:
		GetFaultTypeColorBG := E_Color.LightYellow;
	E_FaultTypes.OW:
		GetFaultTypeColorBG := E_Color.LightYellow;
	E_FaultTypes.OM:
		GetFaultTypeColorBG := E_Color.Bg_Light;
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetLevelColorBG" Id="{5bdf4ec2-b99f-4f59-86af-796d45dd6efc}">
      <Declaration><![CDATA[METHOD PRIVATE GetLevelColorBG : DWORD
VAR_INPUT
	eLogLevel : E_LogLevel;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eLogLevel OF
	E_LogLevel.TRACE:
		GetLevelColorBG := E_Color.White;
	E_LogLevel.DEBUG:
		GetLevelColorBG := E_Color.White;
	E_LogLevel.INFO:
		GetLevelColorBG := E_Color.LightGreen;
	E_LogLevel.WARN:
		GetLevelColorBG := E_Color.LightYellow;
	E_LogLevel.ERROR:
		GetLevelColorBG := E_Color.LightRed;
	E_LogLevel.FATAL:
		GetLevelColorBG := E_Color.LightRed;
END_CASE
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>