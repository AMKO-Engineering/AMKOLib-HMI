<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_HMIControl" Id="{062d2a70-ec77-4a9b-a458-d823fff51efb}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_HMIControl
VAR_INPUT 
END_VAR
VAR_OUTPUT
	bHideEStop 		: BOOL ;
	bHideBorders	: BOOL ;
	sEstopText		: STRING ;
END_VAR
VAR // HMI
END_VAR
VAR
	bWritePar  			: BOOL ; // write parameters 
	bReadPar			: BOOL ; // Read parameter file
	feWriteParameter 	: F_TRIG ; // Falling edge trigger on leaving parameter or manual screen

	reToSettings 		: R_TRIG ; // go to settings
	ePreviousScreen		: E_BaseVisu ; // previous screen
	
	bDisableSettings	: BOOL ; // disable settings button
	
	fbLogView			: FB_LogView;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SetScreen();
SetPopups();
ButtonEnable();
fbLogView();]]></ST>
    </Implementation>
    <Method Name="ButtonEnable" Id="{397e13f1-f0f5-428f-b754-eeb0f6285e52}">
      <Declaration><![CDATA[METHOD PRIVATE ButtonEnable : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Disable Buttons 
	bDisableSettings := GVL_HMI.eShownScreen = E_BaseVisu.Automatic ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetPopups" Id="{22a8bffd-43f0-41dd-9eae-608666b34df7}">
      <Declaration><![CDATA[METHOD PRIVATE SetPopups : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Set popup screens 
bHideEStop 			:= NOT GVL_HMI.bEstopActive ;

GVL_HMI.bEstopActive := FALSE ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetScreen" Id="{f129c7c5-04de-4b71-81ed-a393e95f4aeb}">
      <Declaration><![CDATA[METHOD INTERNAL SetScreen : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Look for edges 
	reToSettings		( CLK := GVL_HMI.bCmdSettings );
	feWriteParameter 	( CLK := GVL_HMI.bCmdParameter OR GVL_HMI.bCmdManual );

// save previous screen 
IF reToSettings.Q  THEN 
	ePreviousScreen := GVL_HMI.eShownScreen ;
END_IF	
	
// Hide border control 
bHideBorders := FALSE ;

// Check active screen	
IF GVL_HMI.bCmdLog THEN 
	GVL_HMI.eShownScreen 	:= E_BaseVisu.LogView;
ELSIF GVL_HMI.bCmdParameter THEN 
	GVL_HMI.eShownScreen 	:= E_BaseVisu.Parameter ;
ELSIF GVL_HMI.bCmdManual THEN 
	GVL_HMI.eShownScreen 	:= E_BaseVisu.Manual;
ELSIF GVL_HMI.bCmdSettings THEN 
	GVL_HMI.eShownScreen 	:= E_BaseVisu.Settings ;
ELSIF NOT GVL_HMI.bCmdSettings AND GVL_HMI.eShownScreen = E_BaseVisu.Settings THEN 
	GVL_HMI.eShownScreen	:= ePreviousScreen ;
ELSIF GVL_HMI.bCmdSemiAuto THEN 
	GVL_HMI.eShownScreen 	:= E_BaseVisu.SemiAutomatic;
	GVL_HMI.bCmdSemiAuto	:= FALSE ; 
ELSIF GVL_HMI.bCmdAutomatic THEN 
	GVL_HMI.eShownScreen := E_BaseVisu.Automatic ;
	GVL_HMI.bCmdAutomatic	:= FALSE ;
ELSE 
	GVL_HMI.eShownScreen := E_BaseVisu.Idle;
	bHideBorders := TRUE  ;	
END_IF

// Write parameters to file
IF feWriteParameter.Q THEN
	bWritePar := TRUE ;
END_IF

IF bWritePar THEN 
	bWritePar R= GVL_Parameters.fbParameterHandler.CmdSavePar();
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>